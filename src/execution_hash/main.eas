;; ┏┓┏┓┏┓┏━      
;; ┏┛┗┫ ┫┗┓┏┓┏┏┳┓
;; ┗━┗┛┗┛┗┛┗┻┛┛┗┗
;;                                             
;; This is an implementation of EIP-2935's predeploy contract.
;;
;; The contract implements a ring buffer to create bounded execution block hash
;; lookup. 

#pragma target "prague"

;; ----------------------------------------------------------------------------
;; MACROS ---------------------------------------------------------------------
;; ----------------------------------------------------------------------------

;; BUFLEN returns the HISTORY_BUFFER_LENGTH as defined in the EIP.
;; was 8191, which is 8191*12 = 98292 seconds
;; 98292 seconds is 98292 * 4 = 393168 L2 blocks
#define BUFLEN = 393168 

;; SYSADDR is the address which calls the contract to submit a new block hash.
#define SYSADDR = .address(0xfffffffffffffffffffffffffffffffffffffffe)

;; call ArbSys::arbBlockNumber()
;; takes 0 stack arguments
;; pushes the result onto the stack
;; we can use memory however we like, 
;; because the "set" path doesn't use memory and the "get" path only mstores at very the end
#define %arb_block_num() {
  ;; store the function selector
  push 0xa3b1b31d ;; [selector]
  push0           ;; [0, selector]
  mstore          ;; []

  ;; stack input to staticcall
  ;; gas
  ;; address
  ;; argsOffset: byte offset in the memory in bytes, the calldata of the sub context.
  ;; argsSize: byte size to copy (size of the calldata).
  ;; retOffset: byte offset in the memory in bytes, where to store the return data of the sub context.
  ;; retSize: byte size to copy (size of the return data).

  ;; retSize
  push 32         ;; [retSize]
  ;; retOffset
  push0           ;; [retOffset, retSize]
  ;; argsSize
  push 4          ;; [argsSize, retOffset, retSize]
  ;; argsOffset, we'll just overwrite memory at 0
  push 28         ;; [argsOffset, argsSize, retOffset, retSize]
  ;; address (ArbSys)
  push 100        ;; [ArbSys, argsOffset, argsSize, retOffset, retSize]
  ;; gas, forward everything left
  gas             ;; [gas, ArbSys, argsOffset, argsSize, retOffset, retSize]

  ;; perform the call
  staticcall      ;; [success]
  iszero          ;; [!success]
  jumpi @throw    ;; []

  ;; push the result onto the stack
  push0           ;; [0]
  mload           ;; [arbBlockNumber]
}

;; ----------------------------------------------------------------------------
;; MACROS END -----------------------------------------------------------------
;; ----------------------------------------------------------------------------

  ;; Protect the submit routine by verifying the caller is equal to
  ;; sysaddr().
  caller            ;; [caller]
  push SYSADDR      ;; [sysaddr, caller]
  eq                ;; [sysaddr == caller]
  jumpi @submit     ;; []

  ;; Fallthrough if addresses don't match -- this means the caller intends
  ;; to read a block hash.

  ;; Verify input is 32 bytes long.
  push 32           ;; [32]
  calldatasize      ;; [calldatasize, 32]
  sub               ;; [calldatasize - 32]

  ;; Jump to continue if length-check passed, otherwise revert.
  jumpi @throw      ;; []

  ;; Check if input is requesting a block hash greater than current block number
  ;; minus 1.
  %arb_block_num    ;; [number]
  push 0            ;; [0, number]
  calldataload      ;; [input, number]
  push 1            ;; [1, input, number]
  dup3              ;; [number, 1, input, number]
  sub               ;; [number-1, input, number]              
  dup2              ;; [input, number-1, input, number]
  gt                ;; [input > number-1, input, number]
  jumpi @throw      ;; [input, number]

  ;; Check if the input is requesting a block hash before the earliest available
  ;; hash currently. Since we've verified that input <= number - 1, we know
  ;; there will be no overflow during the subtraction of number - input.
  push BUFLEN       ;; [buflen, input, number]
  dup2              ;; [input, buflen, input, number]
  dup4              ;; [number, input, buflen, input, number]
  sub               ;; [number - input, buflen, input, number]
  gt                ;; [number - input > buflen, input, number]
  jumpi @throw      ;; [input, number]

  ;; Load the hash.
  push BUFLEN       ;; [buflen, input, number]
  swap1             ;; [input, buflen, number]
  mod               ;; [input % buflen, number]
  sload             ;; [hash, number]

  ;; Load into memory and return.
  push 0            ;; [0, hash, number]
  mstore            ;; [number]
  push 32           ;; [32, number]
  push 0            ;; [0, 32, number]
  return            ;; [number]

throw:
  ;; Reverts current execution with no return data.
  push 0            ;; [0]
  push 0            ;; [0, 0]
  revert            ;; []

submit:
  push 0            ;; [0]
  calldataload      ;; [in]
  push BUFLEN       ;; [buflen, in]
  push 1            ;; [1, buflen, in]
  %arb_block_num    ;; [number, 1, buflen, in]
  sub               ;; [number-1, buflen, in]
  mod               ;; [number-1 % buflen, in]
  sstore

  stop
