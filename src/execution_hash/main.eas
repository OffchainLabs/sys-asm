;; ┏┓┏┓┏┓┏━      
;; ┏┛┗┫ ┫┗┓┏┓┏┏┳┓
;; ┗━┗┛┗┛┗┛┗┻┛┛┗┗
;;                                             
;; This is an implementation of EIP-2935's predeploy contract. It is a slightly
;; modified version of the EIP-4788 predeploy. 

;; The contract implements two ring buffers to create bounded execution block
;; hash lookup. The first ring buffer is a blocknum % buflen -> timestamp 
;; mapping. This is used to ensure blocknum argument actually matches the
;; stored hash and isn't a different dividend. The second ring buffer store the
;; block hash. It's also keyed by blocknum % buflen and the shifted right by
;; buflen so the two don't overlap.
;;
;; The ring buffers can be visualized as follows:
;;
;;  buflen = 10
;; |--------------|--------------|
;; 0             10              20
;;   block nums      block hash
;;
;; To get the corresponding block hash for a specific number, simply add
;; buflen to the number's index in the first ring buffer. The sum will be
;; the storage slot in the second ring buffer where it is stored.


;; ----------------------------------------------------------------------------
;; MACROS ---------------------------------------------------------------------
;; ----------------------------------------------------------------------------

;; BUFLEN returns the HISTORY_BUFFER_LENGTH as defined in the EIP.
#define BUFLEN 8191

;; SYSADDR is the address which calls the contract to submit a new root.
#define SYSADDR 0xfffffffffffffffffffffffffffffffffffffffe

;; do_revert sets up and then executes a revert(0,0) operation.
#define %do_revert() {
  push0             ;; [0]
  push0             ;; [0, 0]
  revert            ;; []
}

;; ----------------------------------------------------------------------------
;; MACROS END -----------------------------------------------------------------
;; ----------------------------------------------------------------------------

.start:
  ;; Protect the submit routine by verifying the caller is equal to
  ;; sysaddr().
  caller            ;; [caller]
  push20 SYSADDR    ;; [sysaddr, caller]
  eq                ;; [sysaddr == caller]
  jumpi @submit     ;; []

  ;; Fallthrough if addresses don't match -- this means the caller intends
  ;; to read a root.


  ;; Check if input > 8 byte value and revert if this isn't the case the
  ;; check is performed by comparing the biggest 8 byte number with the
  ;; call data, which is a right-padded 32 byte number.
  push 0xffffffffffffffff ;; [2^32-1]
  push 0            ;; [0, 2^32-1]
  calldataload      ;; [input, 2^32-1]
  gt                ;; [input > 2^32-1]
  jumpi @throw      ;; []

  ;; Check if input > number-1 then return 0.
  push 1            ;; [1]
  number            ;; [number, 1]
  sub               ;; [number-1]              
  push0             ;; [0, number-1]
  calldataload      ;; [input, number-1]
  gt                ;; [input > number-1]
  jumpi @zeroreturn

  ;; Check if blocknumber > input + 8192 then return 0, no overflow
  ;; expected for input of < max 8 byte value
  push 0            ;; [0]
  calldataload      ;; [input]
  push 8192         ;; [8192, input]
  add               ;; [input+8192]
  number            ;; [number, input+8192]
  gt                ;; [number > input+8192]
  jumpi @zeroreturn      ;; []

  ;; mod 8191 and sload
  push 8191         ;; [8191]
  push 0            ;; [0, 8191]
  calldataload      ;; [input, 8191]
  and               ;; [input % 8191]
  sload             ;; [hash]

  ;; load into mem and return 32 bytes
  push 0            ;; [0, hash]
  mstore            ;; []
  push 32           ;; [32]
  push 0            ;; [0, 32]
  return            ;; []

zeroreturn:
  push 0            ;; [0]
  push 0            ;; [0, 0]
  mstore            ;; []
  push 32           ;; [32]
  push 0            ;; [0, 32]
  return            ;; []

throw:
  ;; Reverts current execution with no return data.
  %do_revert()

submit:
  push 0            ;; [0]
  calldataload      ;; [in]
  push 8191         ;; [8191, in]
  push 1            ;; [1, 8191, in]
  number            ;; [number, 1, 8191, in]
  sub               ;; [number-1, 8191, in]
  and               ;; [number-1 % 8191, in]
  sstore

  stop
